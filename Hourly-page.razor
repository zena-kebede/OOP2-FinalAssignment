@page "/hourly"
@using MySqlConnector;
@using Final.Components.Pages.Data;
<h1>Hourly</h1>


<!--html form that shows the fields available to use to search for an employee that are paid on an hourly rate-->
<label>Employee ID: </label>
<input class="form-control" @bind="id">
<label>First Name </label>
<input class="form-control" @bind="firstName">
<label>Last Name </label>
<input class="form-control" @bind="lastName">
<br />
<button class="btn btn-primary" @onclick="Query">Find Employees</button>
<br />
<br />
<!--Button and text field that allows you to pick the employee that you searched for-->
<select class="form-control" onfocus="this.selectedIndex = -1;" @onchange="FillDetails">
	<option value=" " selected>Please select an Employee</option>
	@if (Hourly.Count() == 0)
	{
		<option>Loading...</option>
	}
	else
	{
		//How the employees information is displayed 
		@foreach (Hourly employee in Hourly)
		{
			<option value="@employee.ID"> @employee.ID, @employee.firstName,@employee.lastName,@employee.rate </option>
		}
	}
</select>
<br />
<div>
	<!--Form that shows the employee information that was searched for in textboxes allowing for changes to be made-->
	<label>Employee ID:</label> <input class="form-control" type="text" placeholder="employee id" @bind="employeeid">
	<label>First Name:</label><input class="form-control" type="text" placeholder="first name" @bind="detailedfirstName">
	<label>Last Name:</label> <input class="form-control" type="text" placeholder="last name" @bind="detailedLastName">
	<label>date of birth:</label> <input class="form-control" type="text" placeholder="Age" @bind="DOB">
	<label>Rate:</label> <input class="form-control" type="text" placeholder="Rate" @bind="Rate">
</div>
<button class="btn btn-primary" @onclick="Save">Save</button>
<br />
<br />
@if (validationerrormessage != "")
{
	<div class="alert alert-danger" role="alert">
		@validationerrormessage
	</div>
}

@code {
	//Constructors
	string chosenEmployee;
	string firstName;
	string lastName;
	int employeeid = 0;
	string detailedfirstName = "";
	string detailedLastName = "";
	string DOB = "";
	double Hours;
	double Rate;
	string validationerrormessage = "";
	//connecting the hourly class to the employee class
	Hourly employee;
	//Creating a list of employees that are in the hourly database to call upon
	List<Hourly> Hourly = new List<Hourly>();
	int id = 0;
	public void Query()
	{
		if (Hourly.Count() != 0)
		{
			Hourly.Clear();
		}
		//Connecting the hourly page to the salaried database
		var builder = new MySqlConnectionStringBuilder
			{
				Server = "localhost",
				UserID = "root",
				Password = "password",
				Database = "employee",
			};
		using (var connection = new MySqlConnection(builder.ConnectionString))
		{
			try
			{
				//Opening the connection to the hourly database
				connection.Open();
				//Creating the condition of what to display is the id, firstname, and lastname are all empty when the find employee is searched for
				if (id == 0 || id == null && firstName == null && lastName == null)
				{
					//Choosing the information we want to display to the user
					string sql = $"SELECT e.employeeID, e.first_name,e.last_name, e.date_of_birth,e.address,e.postal_code,e.phone_number,e.typeEmployee,r.rateHourly FROM employee e INNER JOIN rate_of_pay r ON e.employeeID = r.employeeID Where rateHourly != 0;";
					MySqlCommand command = new MySqlCommand(sql, connection);
					MySqlDataReader reader = command.ExecuteReader();
					while (reader.Read()) //Displaying the searched for employee's information
					{


						int ID = reader.GetInt32(0);
						string firstName = reader.GetString(1);
						string lastName = reader.GetString(2);
						string DOB = reader.GetString(3);
						string address = reader.GetString(4);
						string postalCode = reader.GetString(5);
						string phoneNumber = reader.GetString(6);
						int type = reader.GetInt32(7);
						double rate = reader.GetDouble(8);
						Hourly h = new Hourly(rate, ID, firstName, lastName, DOB, address, phoneNumber, postalCode, type);
						Hourly.Add(h);
					}
				}
				//If the condition is not met then this is the default response
				else
				{
					//Choosing the information we want to display to the user
					string sql = $"SELECT e.employeeID, e.first_name,e.last_name, e.date_of_birth,e.address,e.postal_code,e.phone_number,e.typeEmployee,r.rateHourly FROM employee e INNER JOIN rate_of_pay r ON e.employeeID = r.employeeID Where rateHourly != 0";
					MySqlCommand command = new MySqlCommand(sql, connection);
					MySqlDataReader reader = command.ExecuteReader();
					while (reader.Read()) //Displaying the searched for employee's information
					{

						int ID = reader.GetInt32(0);
						if (ID == id)
						{
							string firstName = reader.GetString(1);
							string lastName = reader.GetString(2);
							string DOB = reader.GetString(3);
							string address = reader.GetString(4);
							string phoneNumber = reader.GetString(5);
							string postalCode = reader.GetString(6);
							int type = reader.GetInt32(7);
							double rate = reader.GetDouble(8);
							Hourly h = new Hourly(rate, ID, firstName, lastName, DOB, address, phoneNumber, postalCode, type);
							Hourly.Add(h);
						}
					}
				}

				connection.Close();
			}
			//Exception message if the app is unable to display the employee information
			catch (MySqlException ex)
			{
				Console.WriteLine("error: " + ex.Message);
			}
		}



	}

	//Funtion on how to fill in the details of the searched for employee
	public void FillDetails(ChangeEventArgs e)
	{
		employeeid = int.Parse(e.Value.ToString()); //Changing all the values to display them as a string to the user
		foreach (Hourly employ in Hourly)
		{
			if (employ.ID == employeeid)
			{
				detailedfirstName = employ.firstName;
				detailedLastName = employ.lastName;
				DOB = employ.DOB;
				Rate = employ.rate;
			}
		}
	}
	public void Save() //Function to save employee data changes to the database
	{
		//Connecting to the database
		var builder = new MySqlConnectionStringBuilder
			{
				Server = "localhost",
				UserID = "root",
				Password = "password",
				Database = "employee",
			};
		using (var connection = new MySqlConnection(builder.ConnectionString))
		{
			try
			{
				if (Rate >= 50)
				{
					throw new ValidationExceptions("Hourly caanot be more than $50/hr");
				}
				
				//Opening the connection to the database
				connection.Open();
				//Updating the employee information of rate and employeeid in the database
				string sql = $"UPDATE rate_of_pay SET rateHourly = {Rate} where employeeID = {employeeid};";
				MySqlCommand command = new MySqlCommand(sql, connection);
				command.ExecuteNonQuery();
				connection.Close(); //Closing connection to the database
			}
			//Exception error that is displayed to the user if the updates are unable to be saved properly
			catch (MySqlException ex)
			{
				Console.WriteLine("error: " + ex.Message);
			}
			catch(ValidationExceptions vex)
			{
				Console.WriteLine("error: " + vex.Message);
				validationerrormessage = vex.Message;
			}
		}
		//Resetting the forms so that you can search for a new user automatically after you are done your previous actions
		if (Rate < 50)
		{
			validationerrormessage = "";
			employeeid = 0;
			detailedfirstName = "";
			detailedLastName = "";
			DOB = "";
			Hours = 0;
			Hourly.Clear();
		}
	}
}
